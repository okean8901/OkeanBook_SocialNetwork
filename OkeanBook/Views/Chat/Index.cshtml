@model OkeanBook.Models.ViewModels.ChatViewModel

@{
    ViewData["Title"] = "Chat";
}

<div class="row h-100">
    <!-- Danh sách chat -->
    <div class="col-md-4 border-end">
        <div class="d-flex flex-column h-100">
            <!-- Header -->
            <div class="p-3 border-bottom">
                <h5 class="mb-0">Tin nhắn</h5>
            </div>

            <!-- Tìm kiếm -->
            <div class="p-3 border-bottom">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Tìm kiếm cuộc trò chuyện...">
                    <button class="btn btn-outline-secondary" type="button">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>

            <!-- Danh sách bạn bè -->
            <div class="flex-grow-1 overflow-auto">
                <div class="list-group list-group-flush">
                    @foreach (var friend in Model.Friends)
                    {
                        <a href="#" class="list-group-item list-group-item-action chat-item" 
                           data-chat-id="@friend.Id" data-is-group="false">
                            <div class="d-flex align-items-center">
                                <div class="position-relative me-3">
                                    <img src="@(friend.Avatar ?? "/img/default-avatar.png")" 
                                         class="rounded-circle" width="40" height="40" alt="Avatar">
                                    <span class="position-absolute bottom-0 end-0 badge rounded-pill bg-success 
                                          @(friend.Status == OkeanBook.Models.UserStatus.Online ? "" : "d-none")" 
                                          style="width: 12px; height: 12px;"></span>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">@friend.UserName</h6>
                                    <p class="mb-1 text-muted small">@(friend.LastMessage ?? "Chưa có tin nhắn")</p>
                                </div>
                                <div class="text-end">
                                    <small class="text-muted">@friend.LastMessageTime?.ToString("HH:mm")</small>
                                    @if (friend.UnreadCount > 0)
                                    {
                                        <span class="badge bg-primary rounded-pill">@friend.UnreadCount</span>
                                    }
                                </div>
                            </div>
                        </a>
                    }
                </div>

                <!-- Danh sách nhóm -->
                @if (Model.Groups.Any())
                {
                    <div class="p-3 border-top">
                        <h6 class="text-muted">Nhóm</h6>
                    </div>
                    <div class="list-group list-group-flush">
                        @foreach (var group in Model.Groups)
                        {
                            <a href="#" class="list-group-item list-group-item-action chat-item" 
                               data-chat-id="@group.Id" data-is-group="true">
                                <div class="d-flex align-items-center">
                                    <img src="@(group.Avatar ?? "/img/default-group.png")" 
                                         class="rounded-circle me-3" width="40" height="40" alt="Group">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">@group.Name</h6>
                                        <p class="mb-1 text-muted small">@(group.LastMessage ?? "Chưa có tin nhắn")</p>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">@group.LastMessageTime?.ToString("HH:mm")</small>
                                        @if (group.UnreadCount > 0)
                                        {
                                            <span class="badge bg-primary rounded-pill">@group.UnreadCount</span>
                                        }
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Khu vực chat -->
    <div class="col-md-8 d-flex flex-column">
        @if (!string.IsNullOrEmpty(Model.SelectedChatId))
        {
            <!-- Header chat -->
            <div class="p-3 border-bottom d-flex align-items-center">
                <div class="d-flex align-items-center">
                    <img id="chatAvatar" src="/img/default-avatar.png" 
                         class="rounded-circle me-3" width="40" height="40" alt="Avatar">
                    <div>
                        <h6 class="mb-0" id="chatName">Tên người dùng</h6>
                        <small class="text-muted" id="chatStatus">Đang online</small>
                    </div>
                </div>
                <div class="ms-auto">
                    <button class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-phone"></i>
                    </button>
                    <button class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-video"></i>
                    </button>
                </div>
            </div>

            <!-- Danh sách tin nhắn -->
            <div class="flex-grow-1 overflow-auto p-3" id="messagesContainer">
                @foreach (var message in Model.Messages)
                {
                    <div class="d-flex @(message.IsOwn ? "justify-content-end" : "justify-content-start") mb-3">
                        <div class="message @(message.IsOwn ? "message-own" : "message-other")">
                            @if (!message.IsOwn)
                            {
                                <img src="@(message.SenderAvatar ?? "/img/default-avatar.png")" 
                                     class="rounded-circle me-2" width="24" height="24" alt="Avatar">
                            }
                            <div class="message-content">
                                <p class="mb-1">@message.Content</p>
                                <small class="text-muted">@message.SentAt.ToString("HH:mm")</small>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Form gửi tin nhắn -->
            <div class="p-3 border-top">
                <form id="messageForm">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" 
                               placeholder="Nhập tin nhắn..." autocomplete="off">
                        <button type="button" class="btn btn-outline-secondary">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary">
                            <i class="fas fa-smile"></i>
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </form>
            </div>
        }
        else
        {
            <!-- Màn hình chào mừng -->
            <div class="d-flex align-items-center justify-content-center h-100">
                <div class="text-center">
                    <i class="fas fa-comments text-muted" style="font-size: 4rem;"></i>
                    <h4 class="mt-3 text-muted">Chọn cuộc trò chuyện</h4>
                    <p class="text-muted">Chọn một cuộc trò chuyện để bắt đầu chat</p>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script>
        let connection;
        let currentChatId = '@Model.SelectedChatId';
        let isGroupChat = @Model.IsGroupChat.ToString().ToLower();

        $(document).ready(function() {
            // Khởi tạo SignalR connection
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            // Bắt đầu connection
            connection.start().then(function () {
                console.log("SignalR Connected");
            }).catch(function (err) {
                console.error("SignalR Connection Error: " + err.toString());
            });

            // Xử lý chọn chat
            $('.chat-item').click(function(e) {
                e.preventDefault();
                var chatId = $(this).data('chat-id');
                var isGroup = $(this).data('is-group');
                
                // Cập nhật UI
                $('.chat-item').removeClass('active');
                $(this).addClass('active');
                
                // Load tin nhắn
                loadMessages(chatId, isGroup);
            });

            // Xử lý gửi tin nhắn
            $('#messageForm').submit(function(e) {
                e.preventDefault();
                var message = $('#messageInput').val().trim();
                if (message && currentChatId) {
                    sendMessage(message);
                    $('#messageInput').val('');
                }
            });

            // Xử lý nhấn Enter
            $('#messageInput').keypress(function(e) {
                if (e.which === 13) {
                    $('#messageForm').submit();
                }
            });
        });

        // SignalR event handlers
        connection.on("ReceiveMessage", function (message) {
            addMessageToUI(message);
        });

        connection.on("ReceiveGroupMessage", function (message) {
            if (message.groupId == currentChatId) {
                addMessageToUI(message);
            }
        });

        connection.on("UserTyping", function (userId) {
            // TODO: Hiển thị "đang nhập..."
        });

        connection.on("UserStoppedTyping", function (userId) {
            // TODO: Ẩn "đang nhập..."
        });

        function loadMessages(chatId, isGroup) {
            currentChatId = chatId;
            isGroupChat = isGroup;
            
            var url = isGroup ? 
                '@Url.Action("GetGroupMessages", "Chat")' + '?groupId=' + chatId :
                '@Url.Action("GetMessages", "Chat")' + '?friendId=' + chatId;
                
            $.get(url)
                .done(function(response) {
                    if (response.success) {
                        displayMessages(response.messages);
                    }
                });
        }

        function sendMessage(content) {
            if (isGroupChat) {
                connection.invoke("SendGroupMessage", parseInt(currentChatId), content, "Text");
            } else {
                connection.invoke("SendPrivateMessage", currentChatId, content, "Text");
            }
        }

        function addMessageToUI(message) {
            var messageHtml = createMessageHtml(message);
            $('#messagesContainer').append(messageHtml);
            scrollToBottom();
        }

        function displayMessages(messages) {
            $('#messagesContainer').empty();
            messages.forEach(function(message) {
                var messageHtml = createMessageHtml(message);
                $('#messagesContainer').append(messageHtml);
            });
            scrollToBottom();
        }

        function createMessageHtml(message) {
            var isOwn = message.isOwn;
            var alignment = isOwn ? 'justify-content-end' : 'justify-content-start';
            var messageClass = isOwn ? 'message-own' : 'message-other';
            
            return `
                <div class="d-flex ${alignment} mb-3">
                    <div class="message ${messageClass}">
                        ${!isOwn ? `<img src="${message.senderAvatar || '/img/default-avatar.png'}" class="rounded-circle me-2" width="24" height="24" alt="Avatar">` : ''}
                        <div class="message-content">
                            <p class="mb-1">${message.content}</p>
                            <small class="text-muted">${new Date(message.sentAt).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})}</small>
                        </div>
                    </div>
                </div>
            `;
        }

        function scrollToBottom() {
            var container = $('#messagesContainer');
            container.scrollTop(container[0].scrollHeight);
        }
    </script>
}
